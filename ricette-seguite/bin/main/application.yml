# application.yml 
--- 
spring: 
  application: 
    name: ricette-seguite
  cloud:
    consul:
      host: consul
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 60s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true 
    loadbalancer: 
      ribbon.enabled: false
  kafka:
    consumer:
      bootstrap-servers: kafka:9092
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: group_id
      auto-offset-reset: earliest 
# POSTGRESQL
  jpa:
    database: POSTGRESQL
# hibernate.ddl-auto=create-drop
    hibernate:
      ddl-auto: create
  datasource:
    platform: postgres
    url: jdbc:postgresql://postgres2:5432/ricetteseguite
    username: postgres
    password: postgres
    driverClassName: org.postgresql.Driver

server: 
   port: ${PORT:${SERVER_PORT:0}}
#  port: 8080
